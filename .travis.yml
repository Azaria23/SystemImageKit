language: cpp
compiler: gcc
sudo: require
dist: trusty

install:
  - sudo apt-get -y install util-linux dosfstools mtools kpartx grub-pc # grub-efi-amd64 conflicts grub-pc

script:
  - cd ..
  - wget -c "https://raw.githubusercontent.com/Outernet-Project/dir2fat32/master/dir2fat32.sh"
  - bash -ex dir2fat32.sh boot.img 33 SystemImageKit
  - # http://nairobi-embedded.org/making_a_qemu_disk_image_bootable_with_grub.html#installing-grub-in-the-disk-image
  - sudo kpartx -l boot.img
  - sudo kpartx -av boot.img 
  - sudo mkdir mnt
  - sudo mount
  - sudo mount /dev/loop0p1 mnt
  - sudo grub-install --no-floppy --root-directory=./mnt /dev/loop0
  - sudo apt-get -y remove grub-pc 
  - sudo apt-get -y install util-linux dosfstools mtools kpartx grub-efi-amd64
  - sudo mkdir -p ./mnt/boot/efi
  - sudo grub-install --target=x86_64-efi --efi-directory=./mnt/boot/EFI --boot-directory=./mnt/boot/ /dev/loop0
  - # May need https://superuser.com/a/200442
  - sudo mkdir -p ./mnt/EFI/BOOT
  - sudo mv /mnt/boot/EFI/*/grubx64.efi /mnt/EFI/BOOT/bootx64.efi
  - sudo bash -e /mnt/boot/iso/additional-initramfs/generate # Generate additional initrd (gets loaded in addition to the one on the ISO)
  - sudo ./mnt/boot/bin/detect # Configure bootloader
  - sudo find /mnt/boot/bin/generate-appimaged* --exec bash {} \; # Create and install ExtensionImage
  - sudo umount ./mnt/
  - ls -lh .
  - tar cfvj boot.img.bz2 boot.img
  - ls -lh .

after_success:
  - wget -c https://github.com/probonopd/uploadtool/raw/master/upload.sh
  - bash upload.sh ./APPNAME*.AppImage*
  
branches:
  except:
    - # Do not build tags that we create when we upload to GitHub Releases
    - /^(?i:continuous)/
